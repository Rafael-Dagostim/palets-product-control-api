// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @unique() @db.VarChar(100)
  document  String   @unique() @db.VarChar(20)
  password  String
  role      UserRole
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime @updatedAt @map("deleted_at") @db.Timestamptz()

  employeeRecords  ProductionRecord[] @relation("fk_production_employee")
  ProductionRecord RecordHistory[]    @relation("fk_history_user_changed")

  @@map("users")
}

model Palet {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(100)
  version        Int
  buyCost        Decimal  @map("buy_cost") @db.Money()
  productionCost Decimal  @map("production_cost") @db.Money()
  sellPrice      Decimal  @map("sell_price") @db.Money()
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  productionRecord ProductionRecord[] @relation("fk_production_palets")

  @@unique([name, version])
  @@map("palets")
}

model ProductionRecord {
  id                String       @id @default(uuid())
  employeeId        String       @map("employee_id")
  paletId           String       @map("palet_id")
  deliveredQuantity Int          @map("delivered_quantity")
  reformedQuantity  Int          @map("reformed_quantity")
  status            RecordStatus
  createdAt         DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime     @updatedAt @map("updated_at") @db.Timestamptz()

  employee      User            @relation(fields: [employeeId], references: [id], name: "fk_production_employee")
  palet         Palet           @relation(fields: [paletId], references: [id], name: "fk_production_palets")
  RecordHistory RecordHistory[] @relation("fk_history_production")

  @@map("production_records")
}

model RecordHistory {
  id          String       @id @default(uuid())
  recordId    String       @map("record_id")
  changedById String       @map("user_id")
  status      RecordStatus
  observation String
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz()

  record    ProductionRecord @relation(fields: [recordId], references: [id], name: "fk_history_production")
  changedBy User             @relation(fields: [changedById], references: [id], name: "fk_history_user_changed")

  @@map("record_histories")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum RecordStatus {
  OPEN
  REFORMED
  CANCELED
  PAYED
}
